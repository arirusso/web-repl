function ReplConnection(e,t,n){n="undefined"==typeof n?{}:n,this.debug=!!n.debug,this.reconnect=!!n.reconnect,this.retryTime=n.retryTime||1e3,this.evalFunction=n.evalFunction,this.host=e,this.port=t,this.active=!1,this.socket,this.supported="WebSocket"in window,console.log(this.supported?"REPL: socket ok":"REPL: socket not supported")}ReplConnection.prototype.eval=function(statement){options="undefined"==typeof options?{}:options;var response={};try{response.value="function"==typeof this.evalFunction?this.evalFunction(statement):eval(statement)}catch(err){response.error=err.message}return response},ReplConnection.prototype.initSocket=function(e){void 0!==this.socket&&null!==this.socket&&this.socket.close();var t="ws://"+this.host+":"+this.port+"/echo";this.socket=new WebSocket(t),e()},ReplConnection.prototype.handleSocketOpen=function(){this.active=!0,console.log("REPL: socket ready")},ReplConnection.prototype.tryConnection=function(){if(console.log("REPL: waiting for connection"),this.reconnect){var e=this;window.setTimeout(function(){e.start()},this.retryTime)}},ReplConnection.prototype.handleSocketClose=function(){this.active?(console.log("REPL: socket closed"),this.active=!1,this.reconnect&&this.tryConnection()):this.tryConnection()},ReplConnection.prototype.convertTimestamp=function(e){var t=e.timestamp;return e.timestamp=new Date(t),e.timestamp},ReplConnection.prototype.handleMessageReceived=function(e){this.debug&&(console.log("REPL: message received"),console.log(e));var t=JSON.parse(e.data);this.convertTimestamp(t);var n=this.eval(t.statement);return this.send(n)},ReplConnection.prototype.send=function(e){var t=this.prepareJSON(e);return this.debug&&(console.log("REPL: sending"),console.log(t)),this.socket.send(t)},ReplConnection.prototype.prepareJSON=function(e){var t;try{e.timestamp=(new Date).getTime(),t=JSON.stringify(e)}catch(n){t=this.handleJsonError(e,n)}return t},ReplConnection.prototype.handleJsonError=function(e,t){return e.value=null,e.error=t.message,this.prepareJSON(e)},ReplConnection.prototype.initEventHandling=function(){var e=this;this.socket.onopen=function(){e.handleSocketOpen()},this.socket.onclose=function(t){e.handleSocketClose(t)},this.socket.onmessage=function(t){e.handleMessageReceived(t)}},ReplConnection.prototype.start=function(e){if(this.supported){var t=this;this.initSocket(function(){t.initEventHandling(),void 0!==e&&e(t)})}};
